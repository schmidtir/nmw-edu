package com.atguigu.edu.realtime.dim;

/* *
 * Package Name: com.atguigu.edu.realtime.dim
 * Author : Kevin
 * Create Date Ôºö2025/1/6
 * Create Time Ôºö20:49
 * TODO
 * <p>
 * version: 0.0.1.0
 */


import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;
import com.atguigu.edu.realtime.common.base.BaseApp;
import com.atguigu.edu.realtime.common.bean.TableProcessDim;
import com.atguigu.edu.realtime.common.util.FlinkSourceUtil;
import com.atguigu.edu.realtime.common.util.HBaseUtil;
import com.atguigu.edu.realtime.common.util.JdbcUtil;
import com.atguigu.edu.realtime.common.util.RedisUtil;
import com.ververica.cdc.connectors.mysql.source.MySqlSource;
import org.apache.flink.api.common.eventtime.WatermarkStrategy;
import org.apache.flink.api.common.functions.MapFunction;
import org.apache.flink.api.common.state.BroadcastState;
import org.apache.flink.api.common.state.MapStateDescriptor;
import org.apache.flink.api.common.state.ReadOnlyBroadcastState;
import org.apache.flink.api.common.typeinfo.Types;
import org.apache.flink.api.java.tuple.Tuple2;
import org.apache.flink.configuration.Configuration;
import org.apache.flink.streaming.api.datastream.BroadcastStream;
import org.apache.flink.streaming.api.datastream.DataStreamSource;
import org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;
import org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;
import org.apache.flink.streaming.api.functions.ProcessFunction;
import org.apache.flink.streaming.api.functions.co.BroadcastProcessFunction;
import org.apache.flink.streaming.api.functions.sink.RichSinkFunction;
import org.apache.flink.util.Collector;
import org.apache.hadoop.hbase.client.Connection;
import redis.clients.jedis.Jedis;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static com.atguigu.edu.realtime.common.constant.Constant.*;

public class DimApp extends BaseApp {
    public static void main(String[] args) {
        new DimApp()
                .start(10001,3,"DIM_APP",TOPIC_DB);
    }

    @Override
    public void handle(StreamExecutionEnvironment env, DataStreamSource<String> ds) {

        // ds.print("INPUT");
        //  {
        //  "database":"edu"
        //  ,"table":"user_chapter_process"
        //  ,"type":"insert"
        //  ,"ts":1736155411
        //  ,"xid":180968
        //  ,"commit":true
        //  ,"data":{"id":2948,"course_id":194,"chapter_id":24385,"user_id":952,"position_sec":259,"create_time":"2025-01-06 17:23:31","update_time":null,"deleted":"0"}
        //  }

        SingleOutputStreamOperator<JSONObject> etlDs = ds.process(
                new ProcessFunction<String, JSONObject>() {
                    @Override
                    public void processElement(String value
                            , ProcessFunction<String, JSONObject>.Context ctx
                            , Collector<JSONObject> out) throws Exception {
                        try {
                            //ËΩ¨Êç¢Êï∞ÊçÆ‰∏∫ JSONObj
                            JSONObject jsonObject = JSON.parseObject(value);

                            // ÊèêÂèñ database
                            String database = jsonObject.getString("database");

                            // ÊèêÂèñ type
                            String type = jsonObject.getString("type");

                            // ÊèêÂèñ data
                            JSONObject dataJsonObj
                                    = jsonObject.getJSONObject("data");

                            //Âà§Êñ≠Â§ÑÁêÜ
                            if (
                                    DB_NAME.equals(database)
                                            &&
                                            (MAXWELL_TYPE_INSERT.equals(type) || MAXWELL_TYPE_UPDATE.equals(type) || MAXWELL_TYPE_DELETE.equals(type) || MAXWELL_TYPE_BOOTSTRAP_INSERT.equals(type))
                                            &&
                                            dataJsonObj != null && dataJsonObj.size() >= 2
                            ) {
                                out.collect(jsonObject);
                            }

                        } catch (Exception e) {
                            throw new RuntimeException(" DimApp => ËøáÊª§ÊéâËÑèÊï∞ÊçÆ" + value);
                        }

                    }
                }
        );

        // etlDs.print("üé¢üé¢");

        MySqlSource<String> mySqlSource = FlinkSourceUtil.getMySqlSource(CONFIG_DB_NAME, TABLE_PROCESS_DIM);
        DataStreamSource<String> configDs =
                env.fromSource( mySqlSource, WatermarkStrategy.noWatermarks(), "mySqlSource" )
                        .setParallelism( 1 );

        // configDs.print();

        SingleOutputStreamOperator<TableProcessDim> tpdDs = configDs.map(
                new MapFunction<String, TableProcessDim>() {
                    @Override
                    public TableProcessDim map(String value) throws Exception {
                        // Â∞ÜÊï¥‰∏™Â≠óÁ¨¶‰∏≤ËΩ¨Êç¢ÊàêJson ÂØπË±°Á±ªÂûã
                        JSONObject jsonObj = JSON.parseObject(value);

                        String op = jsonObj.getString("op");

                        TableProcessDim tableProcessDim;
                        if (CDC_OP_D.equals(op)) {
                            // dÔºåÂèñ before
//                            String beforeJsonStr = jsonObj.getString("before");
//                            JSON.parseObject(beforeJsonStr,TableProcessDim.class);

                            tableProcessDim = jsonObj.getObject("before", TableProcessDim.class);
                        } else {
                            // c,r,uÔºå Âèñ after
                            tableProcessDim = jsonObj.getObject("after", TableProcessDim.class);
                        }

                        // Ë°•ÂÖÖ op
                        tableProcessDim.setOp(op);

                        try {
                            return tableProcessDim;
                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                            throw new RuntimeException(" DimApp => " + value);
                        }
                    }
                }
        ).setParallelism( 1 );

        // tpdDs.print("üßäüßä");

        SingleOutputStreamOperator<TableProcessDim> createOrDelDs = tpdDs.process(
                new ProcessFunction<TableProcessDim, TableProcessDim>() {

                    Connection connection = null;

                    @Override
                    public void open(Configuration parameters) throws Exception {
                        connection = HBaseUtil.getConnection();
                    }

                    @Override
                    public void close() throws Exception {
                        HBaseUtil.closeConnection(connection);
                    }

                    @Override
                    public void processElement(TableProcessDim value
                            , ProcessFunction<TableProcessDim, TableProcessDim>.Context ctx
                            , Collector<TableProcessDim> out) throws Exception {

                        String op = value.getOp();

                        if (CDC_OP_D.equals(op)) {
                            // Âà†Èô§Ë°®
                            dropHBaseTable(value);
                        } else if (CDC_OP_U.equals(op)) {
                            // ÂÖàÂà†Ë°®ÂÜçÂª∫Ë°®
                            dropHBaseTable(value);
                            createHBaseTable(value);
                        } else {
                            // Âª∫Ë°®
                            createHBaseTable(value);
                        }

                        out.collect(value);

                    }

                    private void dropHBaseTable(TableProcessDim tableProcessDim) {
                        HBaseUtil.dropTable(connection, HBASE_NAMESPACE_DIM, tableProcessDim.getSinkTable());
                    }

                    private void createHBaseTable(TableProcessDim tableProcessDim) {
                        HBaseUtil.createTable(connection, HBASE_NAMESPACE_DIM, tableProcessDim.getSinkTable(), tableProcessDim.getSinkFamily());
                    }
                }
        ).setParallelism( 1 );

        // createOrDelDs.print("üòØüòØ");

        MapStateDescriptor<String, TableProcessDim> dimMapState = new MapStateDescriptor<>("dimMapState", Types.STRING, Types.POJO(TableProcessDim.class));
        BroadcastStream<TableProcessDim> broadcast = createOrDelDs.broadcast( dimMapState );

        SingleOutputStreamOperator<Tuple2<JSONObject, TableProcessDim>> filterDs = etlDs.connect(broadcast)
                .process(
                        new BroadcastProcessFunction<JSONObject, TableProcessDim, Tuple2<JSONObject, TableProcessDim>>() {
                            private Map<String, TableProcessDim> configMap = new HashMap<String, TableProcessDim>();

                            @Override
                            public void open(Configuration parameters) throws Exception {
                                // Êü•ËØ¢ËØ≠Âè•
                                String sql =
                                        " SELECT source_table" +
                                                " , sink_table " +
                                                " , sink_family " +
                                                " , sink_columns " +
                                                " , sink_row_key " +
                                                " from " + CONFIG_DB_NAME + "." + TABLE_PROCESS_DIM;
                                // Ëé∑ÂèñËøûÊé•
                                java.sql.Connection connection = JdbcUtil.getConnection();

                                // ÊâßË°åÊü•ËØ¢
                                List<TableProcessDim> configList = JdbcUtil.queryList(connection, sql, TableProcessDim.class, true);

//                                for (TableProcessDim tableProcessDim : configList) {
//                                    System.out.println(tableProcessDim);
//                                }
                                // ÂÖ≥Èó≠ËøûÊé•
                                JdbcUtil.closeConnection(connection);
                                // configList ËΩ¨Âåñ‰∏∫ Map
                                configList.forEach(tableProcessDim -> configMap.put(tableProcessDim.getSourceTable(), tableProcessDim));

                            }

                            @Override
                            public void processElement(JSONObject jsonObj
                                    , BroadcastProcessFunction<JSONObject, TableProcessDim, Tuple2<JSONObject, TableProcessDim>>.ReadOnlyContext ctx
                                    , Collector<Tuple2<JSONObject, TableProcessDim>> out) throws Exception {
// ÊèêÂèñÂπøÊí≠Áä∂ÊÄÅ
                                ReadOnlyBroadcastState<String, TableProcessDim> broadcastState = ctx.getBroadcastState(dimMapState);

                                // ÊèêÂèñ table
                                String table = jsonObj.getString("table");

                                // Âà§Êñ≠ÂπøÊí≠Áä∂ÊÄÅ‰∏≠ÊòØÂê¶ÂåÖÂê´ table
//                                TableProcessDim tableProcessDim = broadcastState.get(table);
                                TableProcessDim tableProcessDim = null;

                                if (
                                        (tableProcessDim = broadcastState.get(table)) != null // ‰ºòÂÖà‰ªéÁä∂ÊÄÅ‰∏≠Âèñ
                                                ||
                                                (tableProcessDim = configMap.get(table)) != null // ÂÜç‰ªéÈ¢ÑÂä†ËΩΩÁöÑ Map ‰∏≠Âèñ
                                ) {
                                    // Áä∂ÊÄÅ‰∏≠ÊúâÔºåËØ¥ÊòéÂ∞±ÊòØÁª¥Â∫¶Ë°®Êï∞ÊçÆ

                                    // Â∞ÜÁª¥Â∫¶Ë°®Êï∞ÊçÆ‰∏≠ÁöÑ data ÂÜôÂà∞‰∏ãÊ∏∏ÔºåÂêåÊó∂Â∞Ü type Ë°•ÂÖÖÂà∞ data ‰∏≠
                                    JSONObject dataJsonObj = jsonObj.getJSONObject("data");

                                    // ËøáÊª§Êéâ‰∏çÈúÄË¶ÅÁöÑÂ≠óÊÆµ
                                    List<String> needColumns = Arrays.asList(tableProcessDim.getSinkColumns().split(","));
                                    // ÁßªÈô§‰∏çÈúÄË¶ÅÁöÑÂ≠óÊÆµ
                                    dataJsonObj.keySet().removeIf(key -> !needColumns.contains(key));


                                    dataJsonObj.put("type", jsonObj.getString("type"));
                                    // ÂÜôÂá∫Êï∞ÊçÆ

                                    if( dataJsonObj == null || tableProcessDim == null) {
                                        System.out.println(dataJsonObj);
                                        System.out.println(tableProcessDim);
                                    }
                                    out.collect(Tuple2.of(dataJsonObj, tableProcessDim));

                                }

                            }

                            @Override
                            public void processBroadcastElement(TableProcessDim value
                                    , BroadcastProcessFunction<JSONObject, TableProcessDim, Tuple2<JSONObject, TableProcessDim>>.Context ctx
                                    , Collector<Tuple2<JSONObject, TableProcessDim>> out) throws Exception {

                                // ÊèêÂèñÂπøÊí≠Áä∂ÊÄÅ
                                BroadcastState<String, TableProcessDim> broadcastState = ctx.getBroadcastState(dimMapState);

                                // Êìç‰ΩúÁ±ªÂûã
                                String op = value.getOp();

                                // ÊåâÁÖßÊìç‰ΩúÁ±ªÂûãÂÜ≥ÂÆöÁä∂ÊÄÅÊâßË°åÂì™‰∫õÊìç‰Ωú
                                if (CDC_OP_D.equals(op)) {
                                    // ‰ªéÁä∂ÊÄÅ‰∏≠Âà†Èô§Áª¥Â∫¶Ë°®
                                    broadcastState.remove(value.getSourceTable());
                                    // ‰ªéÈ¢ÑÂä†ËΩΩ Map ‰∏≠Âà†Èô§Áª¥Â∫¶Ë°®
                                    configMap.remove(value.getSourceTable());
                                } else {
                                    // c,r,u
                                    broadcastState.put(value.getSourceTable(), value);
                                    // ÂæÄÈ¢ÑÂä†ËΩΩ‰∏≠Ê∑ªÂä†Êï∞ÊçÆÔºàÂèØÈÄâÔºâ
                                    configMap.put(value.getSourceTable(), value);
                                }

                            }
                        }
                );

        // filterDs.print("ü´õü´õ");

        filterDs.addSink(
                new RichSinkFunction<Tuple2<JSONObject, TableProcessDim>>() {

                    Connection connection = null;
//                    Jedis jedis = null;
                    /**
                     * ÂàõÂª∫ËøûÊé•
                     */
                    @Override
                    public void open(Configuration parameters) throws Exception {
                        // Ëé∑ÂèñHbase ËøûÊé•ÂØπË±°
                        connection = HBaseUtil.getConnection();
//                        jedis = RedisUtil.getJedis();
                    }

                    /***
                     * ÂÖ≥Èó≠ËøûÊé•
                     */
                    @Override
                    public void close() throws Exception {
                        HBaseUtil.closeConnection( connection );
//                        RedisUtil.closeJedis( jedis );
                    }

                    /***
                     * Êï∞ÊçÆÂÜôÂá∫
                     * @param value The input record.
                     * @param context Additional context about the input record.
                     * @throws Exception
                     */
                    @Override
                    public void invoke(Tuple2<JSONObject, TableProcessDim> value
                            , Context context) throws Exception {
                        // Áª¥Â∫¶Êï∞ÊçÆ
                        JSONObject dataJsonObj = value.f0;

                        // ÈÖçÁΩÆË°®Êï∞ÊçÆ
                        TableProcessDim tableProcessDim = value.f1;

                        // ‰ªé dataJsonObj ‰∏≠ÂèñÂá∫ typeÔºå Âπ∂ÁßªÈô§Ôºå ‰∏çÈúÄË¶ÅÂÜôÂà∞Áª¥Â∫¶Ë°®‰∏≠
//                        String type = dataJsonObj.getString("type");
                        // ÂèñÂá∫Âπ∂‰∏îÁßªÈô§
                        String type = dataJsonObj.remove("type").toString();

                        // Ëé∑Âèñ rowKeyÂàó
                        String rowKeyCol= tableProcessDim.getSinkRowKey();

                        // Ëé∑Âèñ rowKey ÂÄº
                        String rowKey = dataJsonObj.getString( rowKeyCol );

                        // Ëé∑ÂèñÂàóÊóè
                        String sinkFamily = tableProcessDim.getSinkFamily();

                        if( MAXWELL_TYPE_DELETE.equals(type) ) {
                            // ÊâßË°åÂà†Èô§
                            HBaseUtil.delRow( connection, HBASE_NAMESPACE_DIM, tableProcessDim.getSinkTable() , rowKey );
                        }else{
                            // ÊâßË°åÂÜôÂÖ•
                            HBaseUtil.putRow( connection, HBASE_NAMESPACE_DIM, tableProcessDim.getSinkTable() , rowKey, sinkFamily ,dataJsonObj);
                        }

//                        if ( MAXWELL_TYPE_DELETE.equals(type) || MAXWELL_TYPE_UPDATE.equals(type) ) {
//                            // Âà†Èô§ Redis ‰∏≠ÂØπÂ∫îÁöÑÁª¥Â∫¶Êï∞ÊçÆ
//                            RedisUtil.deleteDim( jedis, tableProcessDim.getSinkTable(), rowKey );
//                        }
                    }
                }
        );

    }
}
